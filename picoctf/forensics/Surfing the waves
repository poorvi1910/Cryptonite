SciPy is a free and open-source Python library used for scientific computing and technical computing. SciPy contains modules for optimization, linear algebra, 
integration, interpolation, special functions, FFT, signal and image processing

We can write a python script to extract the data from the audio file. On doing so we see that the first 6 values are: [2008, 2506, 2000, 1508, 2009, 8504]
The last two digits are always 0 followed by a number 1 though 9, which seem like random noise. After we remove the last two digits, there are only 16 unique values 
[10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85]. There are also only 16 values in hexadecimal, so the data is probably encoded using hexadecimal.
We assume that 10 represents 1 in hexadecimal, 15 represents 2, 55 represents a, etc. So, now all we have to do is apply this mapping by looping through the rounded 
audio file data and mapping the value to its position in the sorted list of unique values. Each rounded audio file data point represents a hexadecimal character that 
has been encoded in some way. By looping through them we can undo the encoding using the aforementioned mapping. Then we can combine all the hexadecimal characters 
into one large hexadecimal string and convert it to ascii to get the entire program that was used to create the audio file.

CODE:

from scipy.io import wavfile

# Load the audio file
_, audio_data = wavfile.read('main.wav')

# Remove last two digits since they are noise of every frame in the
# audio file.
rounded_data = [int(str(data)[:2]) for data in audio_data]

# Get and sort the 16 unique data points.
unique_data = list(set(rounded_data))
unique_data.sort()

flag_hex = []
# Loop through the rounded data points
for encoded_hex_char in rounded_data:
    # Decode each data point by mapping it to its respective hexadecimal
    # character.
    decimal_hex_char = unique_data.index(encoded_hex_char)
    # Convert to hexadecimal and remove the `0x`
    hex_char = hex(decimal_hex_char)[2:]
    flag_hex.append(hex_char)

# Convert the list of hexadecimal characters to one long string.
flag_hex_str = "".join(flag_hex)

# Convert hexadecimal to ascii.
flag_str = bytearray.fromhex(flag_hex_str).decode()

print(flag_str)

When we run the flag, the encoding program along with the flag are printed.
